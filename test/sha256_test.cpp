#include "sha256.h"

#include <gtest/gtest.h>

#include <cstdio>
#include <filesystem>
#include <fstream>
#include <map>
#include <string>

TEST(sha256, BlockMode) {
  crypto::sha256::BlockHasher hasher;

  std::vector<uint8_t> empty = {};
  std::vector<uint8_t> expected = {
      0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4,
      0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b,
      0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55};

  EXPECT_EQ(hasher.Hash(empty), expected);

  // "B"
  std::vector<uint8_t> one_byte = {0x42};
  expected = {0xdf, 0x7e, 0x70, 0xe5, 0x02, 0x15, 0x44, 0xf4, 0x83, 0x4b, 0xbe,
              0xe6, 0x4a, 0x9e, 0x37, 0x89, 0xfe, 0xbc, 0x4b, 0xe8, 0x14, 0x70,
              0xdf, 0x62, 0x9c, 0xad, 0x6d, 0xdb, 0x03, 0x32, 0x0a, 0x5c};

  EXPECT_EQ(hasher.Hash(one_byte), expected);

  // "Block"
  std::vector<uint8_t> five_byte = {0x42, 0x6c, 0x6f, 0x63, 0x6b};
  expected = {0x21, 0x1d, 0x0b, 0xb8, 0xcf, 0x4f, 0x5b, 0x52, 0x02, 0xc2, 0xa9,
              0xb7, 0x99, 0x6e, 0x48, 0x38, 0x98, 0x64, 0x4a, 0xa2, 0x47, 0x14,
              0xb1, 0xe1, 0x0e, 0xdd, 0x80, 0xa5, 0x4b, 0xa4, 0xb5, 0x60};

  EXPECT_EQ(hasher.Hash(five_byte), expected);

  // "BlockChainBlockChainBlockChainBlockChainBlockChainBlock"
  std::vector<uint8_t> fifty_five_byte = {
      0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42,
      0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c,
      0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f,
      0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63,
      0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b};

  expected = {0x17, 0x0a, 0x59, 0x3f, 0xe2, 0x39, 0x69, 0x6b, 0xf9, 0xf6, 0x19,
              0x17, 0xc1, 0x34, 0xfe, 0x85, 0x90, 0xdc, 0x23, 0xf6, 0x88, 0x8c,
              0x23, 0xe4, 0x1b, 0xa4, 0x24, 0x73, 0x32, 0xa6, 0x01, 0x68};

  EXPECT_EQ(hasher.Hash(fifty_five_byte), expected);

  // "BlockChainBlockChainBlockChainBlockChainBlockChainBlockB"
  std::vector<uint8_t> fifty_six_byte = {
      0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c,
      0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63,
      0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43,
      0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61,
      0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42};
  expected = {0x76, 0xa2, 0xc4, 0xd3, 0x03, 0x61, 0x87, 0x93, 0x73, 0xad, 0xde,
              0x93, 0x68, 0x50, 0x03, 0xa3, 0x33, 0xbe, 0xc8, 0xf6, 0x64, 0x22,
              0x2c, 0x7e, 0x0e, 0xa6, 0xf0, 0x78, 0x9f, 0xc3, 0x33, 0x0f};

  EXPECT_EQ(hasher.Hash(fifty_six_byte), expected);

  // "BlockChainBlockChainBlockChainBlockChainBlockChainBlockChainBloc"
  std::vector<uint8_t> sixty_four_byte = {
      0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42,
      0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c,
      0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f,
      0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63,
      0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
      0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63};

  expected = {0xfc, 0xea, 0xc9, 0xaa, 0x8c, 0x6c, 0x4f, 0xa6, 0xf8, 0x80, 0x14,
              0x10, 0xc7, 0xdc, 0xa1, 0x74, 0x38, 0x4b, 0x93, 0x26, 0x27, 0xf7,
              0x9d, 0xc0, 0x80, 0xb5, 0xa8, 0xf2, 0xe2, 0xf7, 0xe5, 0x3a};

  EXPECT_EQ(hasher.Hash(sixty_four_byte), expected);
}

TEST(sha256, StreamMode) {
  std::map<std::string, std::vector<uint8_t>> file_hash = {
      {"../test/data/empty_file.bin",
       {0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4,
        0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b,
        0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}},
      {"../test/data/tiny_file_1.bin",
       {0xdf, 0x7e, 0x70, 0xe5, 0x02, 0x15, 0x44, 0xf4, 0x83, 0x4b, 0xbe,
        0xe6, 0x4a, 0x9e, 0x37, 0x89, 0xfe, 0xbc, 0x4b, 0xe8, 0x14, 0x70,
        0xdf, 0x62, 0x9c, 0xad, 0x6d, 0xdb, 0x03, 0x32, 0x0a, 0x5c}},
      {"../test/data/tiny_file_2.bin",
       {0x76, 0xa2, 0xc4, 0xd3, 0x03, 0x61, 0x87, 0x93, 0x73, 0xad, 0xde,
        0x93, 0x68, 0x50, 0x03, 0xa3, 0x33, 0xbe, 0xc8, 0xf6, 0x64, 0x22,
        0x2c, 0x7e, 0x0e, 0xa6, 0xf0, 0x78, 0x9f, 0xc3, 0x33, 0x0f}},
      {"../test/data/tiny_file_3.bin",
       {0xfc, 0xea, 0xc9, 0xaa, 0x8c, 0x6c, 0x4f, 0xa6, 0xf8, 0x80, 0x14,
        0x10, 0xc7, 0xdc, 0xa1, 0x74, 0x38, 0x4b, 0x93, 0x26, 0x27, 0xf7,
        0x9d, 0xc0, 0x80, 0xb5, 0xa8, 0xf2, 0xe2, 0xf7, 0xe5, 0x3a}},
      {"../test/data/small_file.bin",
       {0x30, 0x80, 0xa6, 0xf9, 0x61, 0xdb, 0x65, 0x59, 0x69, 0x8e, 0xa7,
        0x69, 0x2f, 0x0d, 0x5e, 0xfa, 0x5a, 0xd9, 0xfd, 0xe9, 0xac, 0x6c,
        0xf0, 0x75, 0x8c, 0xfa, 0xb1, 0x34, 0x50, 0x9b, 0x5b, 0xd6}},
      {"../test/data/big_file.bin",
       {0xbb, 0x15, 0x24, 0x14, 0x98, 0x6e, 0xe8, 0x6c, 0x0a, 0x04, 0xab,
        0x59, 0xfe, 0x07, 0xbd, 0x00, 0x05, 0x30, 0x70, 0x9c, 0xfe, 0x92,
        0x1a, 0xc5, 0x55, 0x57, 0xf2, 0x9b, 0x07, 0x2b, 0xf7, 0x02}}};

  for (const auto& [file, hash] : file_hash) {
    std::filesystem::path file_path = file;
    EXPECT_TRUE(std::filesystem::exists(file_path));
    EXPECT_EQ(std::filesystem::status(file_path).type(),
              std::filesystem::file_type::regular);

    crypto::sha256::StreamHasher hasher;
    std::ifstream f(file_path.string(), std::ios::binary);
    std::vector<uint8_t> buff(64, 0);
    f.read(reinterpret_cast<char*>(buff.data()), 64);
    auto size = f.gcount();
    while (size == 64) {
      hasher.Append(buff);
      f.read(reinterpret_cast<char*>(buff.data()), 64);
      size = f.gcount();
    }

    if (size > 0) {
      buff.resize(size);
      hasher.Append(buff);
    }

    EXPECT_EQ(hasher.Hash(), hash);
  }
}

TEST(sha256, preprocess) {
  // empty data
  std::vector<uint8_t> empty = {};

  std::vector<uint8_t> expected = {
      0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00};

  crypto::sha256::PreProcess(empty, 512 * 8);
  EXPECT_EQ(empty, expected);

  // "B"
  std::vector<uint8_t> one_byte = {0x42};

  expected = {0x42, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08};
  crypto::sha256::PreProcess(one_byte, 1 * 8);
  EXPECT_EQ(one_byte, expected);

  // "Block"
  std::vector<uint8_t> five_byte = {0x42, 0x6c, 0x6f, 0x63, 0x6b};

  expected = {0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28};
  crypto::sha256::PreProcess(five_byte, 5 * 8);
  EXPECT_EQ(five_byte, expected);

  // "BlockChainBlockChainBlockChainBlockChainBlockChainBlock"
  std::vector<uint8_t> fifty_five_byte = {
      0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42,
      0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c,
      0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f,
      0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63,
      0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b};

  expected = {0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42,
              0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c,
              0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f,
              0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63,
              0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
              0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xb8};
  crypto::sha256::PreProcess(fifty_five_byte, 55 * 8);
  EXPECT_EQ(fifty_five_byte, expected);

  // "BlockChainBlockChainBlockChainBlockChainBlockChainBlockB"
  std::vector<uint8_t> fifty_six_byte = {
      0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c,
      0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63,
      0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43,
      0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61,
      0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42};

  expected = {0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42,
              0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c,
              0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f,
              0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63,
              0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
              0x42, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0};
  crypto::sha256::PreProcess(fifty_six_byte, 56 * 8);
  EXPECT_EQ(fifty_six_byte, expected);

  // "BlockChainBlockChainBlockChainBlockChainBlockChainBlockChainBloc"
  std::vector<uint8_t> sixty_four_byte = {
      0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42,
      0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c,
      0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f,
      0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63,
      0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
      0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63};

  expected = {0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42,
              0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c,
              0x6f, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f,
              0x63, 0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63,
              0x6b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
              0x43, 0x68, 0x61, 0x69, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x80, 0x00,
              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00};
  crypto::sha256::PreProcess(sixty_four_byte, 64 * 8);
  EXPECT_EQ(sixty_four_byte, expected);
}

TEST(sha256, schedule_array) {
  std::array<uint8_t, 64> chunk = {
      0x42, 0x6C, 0x6F, 0x63, 0x6B, 0x43, 0x68, 0x61, 0x69, 0x6E, 0x42,
      0x6C, 0x6F, 0x63, 0x6B, 0x43, 0x68, 0x61, 0x69, 0x6E, 0x42, 0x6C,
      0x6F, 0x63, 0x6B, 0x43, 0x68, 0x61, 0x69, 0x6E, 0x42, 0x6C, 0x6F,
      0x63, 0x6B, 0x43, 0x68, 0x61, 0x69, 0x6E, 0x42, 0x6C, 0x6F, 0x63,
      0x6B, 0x43, 0x68, 0x61, 0x69, 0x6E, 0x42, 0x6C, 0x6F, 0x63, 0x6B,
      0x42, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

  std::array<uint32_t, 64> expected = {
      0x426C6F63, 0x6B436861, 0x696E426C, 0x6F636B43, 0x6861696E, 0x426C6F63,
      0x6B436861, 0x696E426C, 0x6F636B43, 0x6861696E, 0x426C6F63, 0x6B436861,
      0x696E426C, 0x6F636B42, 0x80000000, 0x00000000, 0xC094D9DD, 0xF313E656,
      0x1E7998A1, 0xF43686A8, 0xAC198CEE, 0x6BCF89AB, 0xA868FCDF, 0xB1DFB82B,
      0x4FDD0286, 0x872960F2, 0x6D49C06C, 0xF907DD0A, 0x140E5FA,  0x3DE6EA75,
      0xA021C8DC, 0x8E3D0628, 0x6F2DEEF7, 0xAC2C0815, 0x51048788, 0x267B7EB5,
      0x76E68FBB, 0x71E1202C, 0x7C301315, 0x1AE2FF48, 0xB5D8074A, 0x9DE24FEB,
      0x94B703D1, 0xAB724FC7, 0x2C343B16, 0x7BC4C50,  0x57399FFC, 0x8C3F3774,
      0x45FD6017, 0xF9BB71FA, 0xC9BDDD1D, 0x58BC852,  0xF29708E6, 0x87F81DF6,
      0x9A7DEA13, 0xF046E9F4, 0x4F7E0469, 0x82E50FE9, 0x66B665AF, 0xEB4E0533,
      0x66953C1D, 0xF9F5E6C0, 0xB6580056, 0xA974E257,
  };

  EXPECT_EQ(crypto::sha256::GenerateMessageSchedule(chunk), expected);
}

TEST(sha256, update_hash) {
  auto h = crypto::sha256::h;
  auto k = crypto::sha256::k;
  std::array<uint32_t, 64> w = {
      0x426C6F63, 0x6B436861, 0x696E426C, 0x6F636B43, 0x6861696E, 0x426C6F63,
      0x6B436861, 0x696E426C, 0x6F636B43, 0x6861696E, 0x426C6F63, 0x6B436861,
      0x696E426C, 0x6F636B42, 0x80000000, 0x0,        0xC094D9DD, 0xF313E656,
      0x1E7998A1, 0xF43686A8, 0xAC198CEE, 0x6BCF89AB, 0xA868FCDF, 0xB1DFB82B,
      0x4FDD0286, 0x872960F2, 0x6D49C06C, 0xF907DD0A, 0x140E5FA,  0x3DE6EA75,
      0xA021C8DC, 0x8E3D0628, 0x6F2DEEF7, 0xAC2C0815, 0x51048788, 0x267B7EB5,
      0x76E68FBB, 0x71E1202C, 0x7C301315, 0x1AE2FF48, 0xB5D8074A, 0x9DE24FEB,
      0x94B703D1, 0xAB724FC7, 0x2C343B16, 0x7BC4C50,  0x57399FFC, 0x8C3F3774,
      0x45FD6017, 0xF9BB71FA, 0xC9BDDD1D, 0x58BC852,  0xF29708E6, 0x87F81DF6,
      0x9A7DEA13, 0xF046E9F4, 0x4F7E0469, 0x82E50FE9, 0x66B665AF, 0xEB4E0533,
      0x66953C1D, 0xF9F5E6C0, 0xB6580056, 0xA974E257,
  };

  std::array<uint32_t, 8> expected = {0x63317e15, 0xea043a23, 0xbc2c9740,
                                      0x139ae500, 0xc1af1e3b, 0xf9896df7,
                                      0x53df2660, 0xab9b91ae};
  crypto::sha256::UpdateHash(h, k, w);
  EXPECT_EQ(h, expected);
}